"use server";

import { prisma } from "@/lib/prisma";
import { VehicleFormData } from "@/schemas";
import { currentUser } from "@clerk/nextjs/server";
import type { FuelType } from "@prisma/client";
import { revalidatePath } from "next/cache";

export async function addVehicle(data: VehicleFormData) {
	try {
		const clerkUser = await currentUser();

		if (!clerkUser) {
			throw new Error("Usu√°rio n√£o autenticado");
		}

		const dbUser = await prisma.user.findUnique({
			where: { clerkUserId: clerkUser.id },
		});

		if (!dbUser) {
			throw new Error("Usu√°rio n√£o encontrado no banco de dados");
		}

		const vehicleData = {
			make: data.make,
			model: data.model,
			year: data.year,
			fuelType: data.fuelType,
			userId: dbUser.id,
		};

		const vehicle = await prisma.vehicle.create({
			data: vehicleData,
		});

		console.log("Ve√≠culo criado:", vehicle);

		return vehicle;
	} catch (error) {
		console.error("Erro completo ao criar ve√≠culo:", error);
		throw new Error(`Falha ao adicionar ve√≠culo: ${error instanceof Error ? error.message : "Erro desconhecido"}`);
	}
}

export async function deleteVehicle(id: string) {
	try {
		const vehicle = await prisma.vehicle.delete({
			where: { id },
		});

		return vehicle;
	} catch (error) {
		console.error("Erro ao deletar ve√≠culo:", error);
		throw new Error(`Falha ao deletar ve√≠culo: ${error instanceof Error ? error.message : "Erro desconhecido"}`);
	}
}

export async function getUserVehicles() {
	try {
		const clerkUser = await currentUser();

		if (!clerkUser) {
			throw new Error("Usu√°rio n√£o autenticado");
		}

		const dbUser = await prisma.user.findUnique({
			where: { clerkUserId: clerkUser.id },
		});

		if (!dbUser) {
			throw new Error("Usu√°rio n√£o encontrado no banco de dados");
		}

		const vehicles = await prisma.vehicle.findMany({
			where: { userId: dbUser.id },
		});

		// revalidatePath("/dashboard/vehicles");

		return vehicles;
	} catch (error) {
		console.error("Erro ao buscar ve√≠culos do usu√°rio:", error);
		throw new Error(
			`Falha ao buscar ve√≠culos do usu√°rio: ${error instanceof Error ? error.message : "Erro desconhecido"}`,
		);
	}
}

export async function setDefaultVehicle(id: string) {
	try {
		console.log("üöÄ Iniciando setDefaultVehicle com id:", id);

		const clerkUser = await currentUser();
		if (!clerkUser) {
			console.error("‚ùå Usu√°rio n√£o autenticado");
			return { error: "Usu√°rio n√£o autenticado" };
		}

		const dbUser = await prisma.user.findUnique({
			where: { clerkUserId: clerkUser.id },
		});

		if (!dbUser) {
			console.error("‚ùå Usu√°rio n√£o encontrado no banco de dados");
			return { error: "Usu√°rio n√£o encontrado no banco de dados" };
		}

		console.log("üîç Usu√°rio encontrado:", dbUser);

		// üîπ Log dos ve√≠culos antes da atualiza√ß√£o
		const existingVehicles = await prisma.vehicle.findMany({
			where: { userId: dbUser.id },
		});
		console.log("üöó Ve√≠culos encontrados do usu√°rio:", existingVehicles);

		// üîπ Atualizar todos os ve√≠culos para isDefault = false antes
		console.log("üîÑ Removendo ve√≠culo padr√£o anterior...");
		const updatedCount = await prisma.vehicle.updateMany({
			where: { userId: dbUser.id, isDefault: true },
			data: { isDefault: false },
		});
		console.log("‚úÖ Ve√≠culos antigos atualizados:", updatedCount);

		if (!updatedCount || updatedCount.count === 0) {
			console.warn("‚ö† Nenhum ve√≠culo foi atualizado para isDefault: false.");
		}

		// üîπ Atualizar o ve√≠culo espec√≠fico para isDefault = true
		console.log("üåü Definindo novo ve√≠culo padr√£o:", id);
		const updatedVehicle = await prisma.vehicle.update({
			where: { id },
			data: { isDefault: true },
		});
		console.log("‚úÖ Ve√≠culo atualizado com sucesso:", updatedVehicle);

		// üîπ Certifique-se de sempre retornar um objeto
		return updatedVehicle ?? { error: "Ve√≠culo n√£o encontrado ap√≥s update" };
	} catch (error) {
		console.error("üî• Erro cr√≠tico:", error);
		return { error: `Erro interno: ${error instanceof Error ? error.message : "Erro desconhecido"}` };
	}
}

export async function updateVehicle(id: string, data: VehicleFormData) {
	try {
		const vehicle = await prisma.vehicle.update({
			where: { id },
			data: {
				make: data.make,
				model: data.model,
				year: data.year,
				fuelType: data.fuelType,
			},
		});

		return vehicle;
	} catch (error) {
		console.error("Erro ao atualizar ve√≠culo:", error);
		throw new Error(`Falha ao atualizar ve√≠culo: ${error instanceof Error ? error.message : "Erro desconhecido"}`);
	}
}
