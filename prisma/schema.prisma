// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FuelType {
  GASOLINE
  ELECTRIC
  HYBRID
  DIESEL
}

enum PlatformType {
  UBER
  BOLT
  TIPS
}

enum ShiftType {
  MORNING // Manhã
  AFTERNOON // Tarde
  NIGHT // Noite
}

enum ExpenseCategory {
  FUEL // Combustível
  FOOD // Alimentação
  MAINTENANCE // Manutenção
  PARKING // Estacionamento
  TOLL // Pedágio
  RENT // Aluguel
  OTHER // Outros
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum VehicleOwnership {
  OWNED // Próprio
  RENTED // Alugado
  COMMISSION // Comissão
}

model User {
  id          String  @id @default(uuid())
  email       String? @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  clerkUserId String  @unique

  vehicles      Vehicle[]
  shifts        Shift[]
  goals         UserGoal[]
  fixedExpenses FixedExpense[]
  weeklyPeriods WeeklyPeriod[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
}

model Vehicle {
  id             String           @id @default(uuid())
  make           String
  model          String
  year           Int
  fuelType       FuelType
  isDefault      Boolean          @default(false)
  ownership      VehicleOwnership @default(OWNED)
  weeklyRent     Float? // Valor do aluguel semanal (para veículos alugados)
  commissionRate Float? // Porcentagem de comissão (para veículos em comissão)
  licensePlate   String? // Placa do veículo
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Shift          Shift[]
}

model WeeklyPeriod {
  id         String    @id @default(uuid())
  name       String?
  startDate  DateTime
  endDate    DateTime
  weeklyGoal Float // Adicionando este campo
  isActive   Boolean   @default(false)
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Shift      Shift[]
  Expense    Expense[]
}

model Shift {
  id              String         @id @default(uuid())
  date            DateTime
  uberEarnings    Float          @default(0)
  boltEarnings    Float          @default(0)
  otherEarnings   Float          @default(0)
  totalEarnings   Float?
  odometer        Float
  initialOdometer Float?
  finalOdometer   Float?
  notes           String?
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  vehicleId       String
  vehicle         Vehicle        @relation(fields: [vehicleId], references: [id])
  weeklyPeriodId  String?
  weeklyPeriod    WeeklyPeriod?  @relation(fields: [weeklyPeriodId], references: [id])
  expenses        Expense[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ShiftIncome     ShiftIncome[]
  ShiftExpense    ShiftExpense[]

  @@index([userId])
  @@index([vehicleId])
  @@index([weeklyPeriodId])
}

model ShiftIncome {
  id      String @id @default(uuid())
  shiftId String // Associação com o turno
  shift   Shift  @relation(fields: [shiftId], references: [id])

  platform PlatformType // Plataforma de origem
  amount   Float // Valor do rendimento

  // Campos opcionais para detalhamento
  tripCount   Int? // Número de viagens
  description String? // Descrição adicional

  isExtendedHour Boolean @default(false)

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftExpense {
  id      String @id @default(uuid())
  shiftId String // Associação com o turno
  shift   Shift  @relation(fields: [shiftId], references: [id])

  category    ExpenseCategory // Categoria da despesa
  amount      Float // Valor da despesa
  description String? // Descrição opcional

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGoal {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  weeklyNetIncome  Float? // Objetivo de ganho líquido semanal (opcional)
  monthlyNetIncome Float // Objetivo de ganho líquido mensal
  workDaysPerWeek  Int // Dias de trabalho por semana
  workHoursPerDay  Float // Horas de trabalho por dia

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FixedExpense {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name      String // Nome da despesa (ex: "Aluguel do carro")
  amount    Float // Valor da despesa
  frequency ExpenseFrequency // Frequência (semanal, mensal, etc)
  dueDay    Int? // Dia de vencimento (para despesas mensais)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id             String        @id @default(uuid())
  date           DateTime
  amount         Float
  category       String // Ou use um enum se preferir
  notes          String?
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  shiftId        String?
  shift          Shift?        @relation(fields: [shiftId], references: [id])
  weeklyPeriodId String?
  weeklyPeriod   WeeklyPeriod? @relation(fields: [weeklyPeriodId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId])
  @@index([shiftId])
  @@index([weeklyPeriodId])
}
