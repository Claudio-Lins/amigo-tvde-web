// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FuelType {
  GASOLINE
  ELECTRIC
  HYBRID
  DIESEL
}

enum PlatformType {
  UBER
  BOLT
  TIPS
}

enum ShiftType {
  MORNING // Manhã
  AFTERNOON // Tarde
  NIGHT // Noite
}

enum ExpenseCategory {
  FUEL // Combustível
  FOOD // Alimentação
  MAINTENANCE // Manutenção
  PARKING // Estacionamento
  TOLL // Pedágio
  OTHER // Outros
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model User {
  id          String  @id @default(uuid())
  email       String? @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  clerkUserId String  @unique

  vehicles      Vehicle[]
  shifts        Shift[]
  goals         UserGoal[]
  fixedExpenses FixedExpense[]
  weeklyPeriods WeeklyPeriod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id        String   @id @default(uuid())
  make      String
  model     String
  year      Int
  fuelType  FuelType
  isDefault Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeeklyPeriod {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name      String
  startDate DateTime // Data de início (segunda-feira)
  endDate   DateTime // Data de fim (domingo)
  isActive  Boolean  @default(true)

  shifts Shift[] // Turnos dentro deste período semanal

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  vehicleId String

  type ShiftType // Tipo de turno (manhã/tarde/noite)

  startTime DateTime // Início do turno
  endTime   DateTime? // Fim do turno (opcional, pode ser fechado depois)

  startMileage Float // Quilometragem inicial
  endMileage   Float? // Quilometragem final (opcional)

  weeklyPeriodId String?
  weeklyPeriod   WeeklyPeriod? @relation(fields: [weeklyPeriodId], references: [id])

  extendedEndTime DateTime? // Para registrar horários que passam da meia-noite

  // Relações com outras entidades
  expenses ShiftExpense[] // Despesas do turno
  incomes  ShiftIncome[] // Rendimentos do turno

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftIncome {
  id      String @id @default(uuid())
  shiftId String // Associação com o turno
  shift   Shift  @relation(fields: [shiftId], references: [id])

  platform PlatformType // Plataforma de origem
  amount   Float // Valor do rendimento

  // Campos opcionais para detalhamento
  tripCount   Int? // Número de viagens
  description String? // Descrição adicional

  isExtendedHour Boolean @default(false)

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftExpense {
  id      String @id @default(uuid())
  shiftId String // Associação com o turno
  shift   Shift  @relation(fields: [shiftId], references: [id])

  category    ExpenseCategory // Categoria da despesa
  amount      Float // Valor da despesa
  description String? // Descrição opcional

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGoal {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  weeklyNetIncome  Float? // Objetivo de ganho líquido semanal (opcional)
  monthlyNetIncome Float // Objetivo de ganho líquido mensal
  workDaysPerWeek  Int // Dias de trabalho por semana
  workHoursPerDay  Float // Horas de trabalho por dia

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FixedExpense {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name      String // Nome da despesa (ex: "Aluguel do carro")
  amount    Float // Valor da despesa
  frequency ExpenseFrequency // Frequência (semanal, mensal, etc)
  dueDay    Int? // Dia de vencimento (para despesas mensais)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
