generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String?        @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  clerkUserId   String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Expense       Expense[]
  fixedExpenses FixedExpense[]
  fuelRecords   FuelRecord[]
  shifts        Shift[]
  shiftExpenses ShiftExpense[]
  goals         UserGoal[]
  vehicles      Vehicle[]
  weeklyPeriods WeeklyPeriod[]
}

model Vehicle {
  id             String           @id @default(uuid())
  model          String
  year           Int
  fuelType       FuelType
  isDefault      Boolean          @default(false)
  ownership      VehicleOwnership @default(OWNED)
  weeklyRent     Float?
  commissionRate Float?
  licensePlate   String?
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  brand          String
  fuelRecords    FuelRecord[]
  Shift          Shift[]
  user           User             @relation(fields: [userId], references: [id])
}

model WeeklyPeriod {
  id         String    @id @default(uuid())
  name       String?
  startDate  DateTime
  endDate    DateTime
  weeklyGoal Float
  isActive   Boolean   @default(false)
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Expense    Expense[]
  Shift      Shift[]
  user       User      @relation(fields: [userId], references: [id])
}

model Shift {
  id              String         @id @default(uuid())
  startTime       DateTime?
  endTime         DateTime?
  breakMinutes    Int?
  date            DateTime
  uberEarnings    Float          @default(0)
  boltEarnings    Float          @default(0)
  otherEarnings   Float?         @default(0)
  totalEarnings   Float?
  odometer        Float
  initialOdometer Float?
  finalOdometer   Float?
  notes           String?
  userId          String
  vehicleId       String
  weeklyPeriodId  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  expenses        Expense[]
  fuelRecords     FuelRecord[]
  user            User           @relation(fields: [userId], references: [id])
  vehicle         Vehicle        @relation(fields: [vehicleId], references: [id])
  weeklyPeriod    WeeklyPeriod?  @relation(fields: [weeklyPeriodId], references: [id])
  ShiftExpense    ShiftExpense[]
  ShiftIncome     ShiftIncome[]

  @@index([userId])
  @@index([vehicleId])
  @@index([weeklyPeriodId])
}

model ShiftIncome {
  id             String       @id @default(uuid())
  shiftId        String
  platform       PlatformType
  amount         Float
  tripCount      Int?
  description    String?
  isExtendedHour Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shift          Shift        @relation(fields: [shiftId], references: [id])
}

model ShiftExpense {
  id          String          @id @default(uuid())
  shiftId     String
  category    ExpenseCategory
  amount      Float
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  fuelRecord  FuelRecord?
  shift       Shift           @relation(fields: [shiftId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
}

model UserGoal {
  id               String   @id @default(uuid())
  userId           String
  weeklyNetIncome  Float?
  monthlyNetIncome Float
  workDaysPerWeek  Int
  workHoursPerDay  Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model FixedExpense {
  id        String           @id @default(uuid())
  userId    String
  name      String
  amount    Float
  frequency ExpenseFrequency
  dueDay    Int?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

model Expense {
  id             String        @id @default(uuid())
  date           DateTime
  amount         Float
  category       String
  notes          String?
  userId         String
  shiftId        String?
  weeklyPeriodId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shift          Shift?        @relation(fields: [shiftId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  weeklyPeriod   WeeklyPeriod? @relation(fields: [weeklyPeriodId], references: [id])

  @@index([userId])
  @@index([shiftId])
  @@index([weeklyPeriodId])
}

model FuelRecord {
  id             String        @id @default(uuid())
  date           DateTime
  odometer       Float
  fuelAmount     Float
  pricePerUnit   Float
  totalPrice     Float
  fullTank       Boolean       @default(true)
  notes          String?
  vehicleId      String
  userId         String
  chargingMethod String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shiftExpenseId String?       @unique
  shiftExpense   ShiftExpense? @relation(fields: [shiftExpenseId], references: [id])
  shiftId        String
  shift          Shift         @relation(fields: [shiftId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  vehicle        Vehicle       @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
  @@index([userId])
  @@index([shiftId])
}

enum FuelType {
  GASOLINE
  ELECTRIC
  HYBRID
  DIESEL
}

enum PlatformType {
  UBER
  BOLT
  TIPS
}

enum ShiftType {
  MORNING
  AFTERNOON
  NIGHT
}

enum ExpenseCategory {
  FUEL
  FOOD
  MAINTENANCE
  PARKING
  TOLL
  RENT
  OTHER
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum VehicleOwnership {
  OWNED
  RENTED
  COMMISSION
}
